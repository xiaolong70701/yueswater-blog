import numpy as np
import matplotlib.pyplot as plt
# Define the production function y = K^0.5 * L^0.5
def production_function(K, L):
return np.sqrt(K) * np.sqrt(L)
# Create a grid of K and L values
K_values = np.linspace(0, 10, 100)
L_values = np.linspace(0, 10, 100)
K, L = np.meshgrid(K_values, L_values)
# Calculate the output (y) using the production function
output = production_function(K, L)
# Create a contour plot
plt.figure(figsize=(8, 6))
contour_plot = plt.contourf(K, L, output, levels=20, cmap='viridis')
plt.colorbar(contour_plot, label='Output (y)')
plt.xlabel('Capital (K)')
plt.ylabel('Labor (L)')
plt.title('Production Function Contour Plot: y = K^{0.5}L^{0.5}')
plt.show()
def cobb_douglas(alpha,kmax):
"""
Plot the Cobb-Douglas function y=k**alpha
for k in [0,kmax]
"""
NPOINTS = 100
k = np.linspace(0,kmax,NPOINTS)
y = k**alpha
plt.plot(k,y)
import numpy as np
import matplotlib.pyplot as plt
def cobb_douglas(alpha,kmax):
"""
Plot the Cobb-Douglas function y=k**alpha
for k in [0,kmax]
"""
NPOINTS = 100
k = np.linspace(0,kmax,NPOINTS)
y = k**alpha
plt.plot(k,y)
cobb_douglas(0.3,10)
import numpy as np
import matplotlib.pyplot as plt
def cobb_douglas(alpha,kmax):
"""
Plot the Cobb-Douglas function y=k**alpha
for k in [0,kmax]
"""
NPOINTS = 100
k = np.linspace(0,kmax,NPOINTS)
y = k**alpha
plt.plot(k,y)
cobb_douglas(0.3,10)
import numpy as np
import matplotlib.pyplot as plt
NPOINTS = 1000
alpha = 0.3
kmax = 10
k = np.linspace(0,kmax,NPOINTS)
y = k**alpha
plt.plot(k,y)
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
NPOINTS = 1000
alpha = 0.3
kmax = 10
k = np.linspace(0,kmax,NPOINTS)
y = k**alpha
plt.plot(k,y)
quit()
q()
a = 2
a
dd
d
d
sada
d
asd
as
d
